36d35
<     private static final int CUTOFF = 8;  // cutoff to middle pivot, must be >= 1
48c47
<         sort(a, 0, a.length - 1);
---
>         sort(a, 0, a.length - 1, (int)(Math.log(a.length) / Log2) / 2);
53c52
<     private static void sort(Comparable[] a, int lo, int hi) { 
---
>     private static void sort(Comparable[] a, int lo, int hi, int depth) { 
56,57c55,61
< 		if (N <= CUTOFF) j = lo + ((hi - lo) >> 1);
< 		else if (N <= 40) j = median3(a, lo, lo + N/2, hi); // QuickX.java uses 40 
---
> 		if (depth == 0) {
> 			Comparable[] aux = new Comparable[N];
> 			System.arraycopy(a, lo, aux, 0, N);
> 			MergeX.sort(aux);
> 			System.arraycopy(aux, 0, a, lo, N);
> 			return;
> 		}
58a63
> 			depth--;
89,90c94,95
<         sort(a, lo, hole - 1);
<         sort(a, (k < 0 ? hole : k) + 1, hi);
---
>         sort(a, lo, hole - 1, depth);
>         sort(a, (k < 0 ? hole : k) + 1, hi, depth);
125c130
<     /***********************************************************************
---
>    /***********************************************************************
