36d35
<     private static final int CUTOFF = 8;  // cutoff to middle pivot, must be >= 1
48c47
<         sort(a, 0, a.length - 1);
---
>         sort(a, 0, a.length - 1, (int)(Math.log(a.length) / Log2) / 2);
53c52
<     private static void sort(Comparable[] a, int lo, int hi) { 
---
>     private static void sort(Comparable[] a, int lo, int hi, int depth) { 
56,57c55,61
< 		if (N <= CUTOFF) j = lo + ((hi - lo) >> 1);
< 		else if (N <= 40) j = median3(a, lo, lo + N/2, hi); // QuickX.java uses 40 
---
> 		if (depth == 0) {
> 			Comparable[] aux = new Comparable[N];
> 			System.arraycopy(a, lo, aux, 0, N);
> 			MergeX.sort(aux);
> 			System.arraycopy(aux, 0, a, lo, N);
> 			return;
> 		}
58a63
> 			depth--;
64,66c69,70
< 			int Nth = L >> 1;
< 			sortIndex(a, index, 0, L - 1, Nth);
< 			j = index[Nth];		// middle index
---
> 			sortIndex(a, index, 0, L - 1);
> 			j = index[L >> 1];			// middle index
90,91c94,95
<         sort(a, lo, hole - 1);
<         sort(a, (k < 0 ? hole : k) + 1, hi);
---
>         sort(a, lo, hole - 1, depth);
>         sort(a, (k < 0 ? hole : k) + 1, hi, depth);
96c100
< 	private static void sortIndex(Comparable[] a, int[] index, int lo, int hi, int Nth) {
---
> 	private static void sortIndex(Comparable[] a, int[] index, int lo, int hi) {
98c102
< 		int hole = lo + ((hi - lo) >> 1);
---
> 		int hole = hi;
101,102d104
< 		index[hole] = index[hi];
< 		hole = hi;
117,118c119,120
< 		if (Nth < hole) sortIndex(a, index, lo, hole - 1, Nth);
< 		if (Nth > hole) sortIndex(a, index, hole + 1, hi, Nth);
---
> 		sortIndex(a, index, lo, hole - 1);
> 		sortIndex(a, index, hole + 1, hi);
128c130
<     /***********************************************************************
---
>    /***********************************************************************
